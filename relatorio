Trabalho 1 -Analisador Léxico.

Ferramenta utilizada:

	Flex - Versão 2.6.4
	
Alfabeto

	Σ = {A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, Y, Z,
	a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v ,w, x, y, z,
	0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
	+, -, *, /, %,
	[, ] , ,, (, ), {, },
	=, <, >, ;, _}.


Analisador Léxico para a linguagem proposta reconhecer a seguinte linguagem:

	Digitos e números:
    		Exemplos de expressões aceitas:
		Exemplos de expressões não aceitas:
    
   	Operadores matemáticos:
    		Exemplos de expressões aceitas:
		Exemplos de expressões não aceitas:
    
    	Operadores lógicos:
    		Exemplos de expressões aceitas:
		Exemplos de expressões não aceitas:
    
    	Delimitadores de escopo:
		Exemplos de expressões aceitas:
		Exemplos de expressões não aceitas:

	Delimitadores de instrução e separação:
		Exemplos de expressões aceitas:
		Exemplos de expressões não aceitas:

	Espaço em branco:
		Exemplos de expressões aceitas:
		Exemplos de expressões não aceitas:

	Comentários:
		Exemplos de expressões aceitas:
		Exemplos de expressões não aceitas:

	Palavras chave:
		Exemplos de expressões aceitas:
		Exemplos de expressões não aceitas:

	Tipos básicos de dados:
		Exemplos de expressões aceitas:
		Exemplos de expressões não aceitas:

Regras:

    Letras e palavras: [A-Za-z]

    Dígitos e números: [0-9]+

    Operadores matemáticos: [ * | / | + | - | % ]

    Operadores lógicos: [ < | > | <= | >= | == | && | || ]

    Delimitadores de escopo: [ ( | ) | { | } | ] | [ ]

    Delimitadores de instrução e separação: [ , | ; ]

    Espaço em branco: [ \n | \t ]

    Comentários: [ // ][ ^\n ]*

    Palavras Chave: se | senao | para | enquanto | int | real | string | main | void

    Tipos básicos de dados:

        int [+|-]?[0-9]+
        real [+|-]?[0-9]+"."[0-9]+
        string [A-Za-z_]+[0-9 | A-Za-z_]*


Execução

Arquivos utilizados:

	AnalisadorLexico.l – código de regras que definem a linguagem;
	lex.yy.c – código do gerador(flex); 
	AnalisadorLexico - executavél gerado a partir da compilação do arquivo lex.yy.c;
	input.c – arquivo contendo exemplos de entrada presentes na linguagem ou não;

Para executar foi necessário instalar o Flex e executar a seguinte sequência de comandos:

	$ flex AnalisadorLexico.l
	$ gcc lex.yy.c -o AnalisadorLexico -lfl
   	$ ./AnalisadorLexico input.c ou ./AnalisadorLexico < input.c

Exemplo de entrada - input.c

	void main(void){
		int x;
		int y; int z;
		x = 5;
		y = 10;
	}

Saída

O analisador gerará um texto impresso na tela indicando o reconhecimento, ou não, dos símbolos(tokens)
presentes no arquivo de entrada, acompanhado do número da linha onde tal símbolo foi encontrado.

Segue um exemplo de saída gerado pelo AnalisadorLexico considerando o exemplo de entrada, input.c,
aprentado na seção anterior:

//Testar o código e colocar a saída aqui
Tokens encontrados no arquivo:

palavra reservada: void -> linha: 1
espaco em branco localizado.    -> linha: 1
palavra reservada: main -> linha: 1
delimitador de escopo: (        -> linha: 1
palavra reservada: void -> linha: 1
delimitador de escopo: )        -> linha: 1
delimitador de escopo: {        -> linha: 1
delimitador de linha: ENTER     -> linha: 1
tabulacao: TAB  -> linha: 2
palavra reservada: int  -> linha: 2
espaco em branco localizado.    -> linha: 2
string de identificadores: x    -> linha: 2
fim da instrucao: ;     -> linha: 2
delimitador de linha: ENTER     -> linha: 2
tabulacao: TAB  -> linha: 3
palavra reservada: int  -> linha: 3
espaco em branco localizado.    -> linha: 3
string de identificadores: y    -> linha: 3
fim da instrucao: ;     -> linha: 3
espaco em branco localizado.    -> linha: 3
palavra reservada: int  -> linha: 3
espaco em branco localizado.    -> linha: 3
string de identificadores: z    -> linha: 3
fim da instrucao: ;     -> linha: 3
delimitador de linha: ENTER     -> linha: 3
tabulacao: TAB  -> linha: 4
string de identificadores: x    -> linha: 4
espaco em branco localizado.    -> linha: 4
operador de atribuicao: =       -> linha: 4
espaco em branco localizado.    -> linha: 4
valor inteiro: 5        -> linha: 4
fim da instrucao: ;     -> linha: 4
delimitador de linha: ENTER     -> linha: 4
tabulacao: TAB  -> linha: 5
string de identificadores: y    -> linha: 5
espaco em branco localizado.    -> linha: 5
operador de atribuicao: =       -> linha: 5
espaco em branco localizado.    -> linha: 5
valor inteiro: 10       -> linha: 5
fim da instrucao: ;     -> linha: 5
delimitador de linha: ENTER     -> linha: 5
delimitador de escopo: }        -> linha: 6
delimitador de linha: ENTER     -> linha: 6
